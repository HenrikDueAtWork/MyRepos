<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="locAdomdConnectErr" xml:space="preserve">
    <value>ADOMD.NET Connection error on connect string ({0}): {1}</value>
  </data>
  <data name="locAdomdDisconnErr" xml:space="preserve">
    <value>ADOMD.NET disconnect error: {0}</value>
  </data>
  <data name="locAdomdExecutionErr" xml:space="preserve">
    <value>MDX query execution error: {0}</value>
  </data>
  <data name="locAmoConnErr" xml:space="preserve">
    <value>AMO connection error on connect string ({0}): {1}</value>
  </data>
  <data name="locAmoDisconnErr" xml:space="preserve">
    <value>AMO disconnect error: {0}</value>
  </data>
  <data name="locAmoExecutionErr" xml:space="preserve">
    <value>XMLA script execution error: {0}</value>
  </data>
  <data name="locCheckOutputForErr" xml:space="preserve">
    <value>Check the output file for errors.</value>
  </data>
  <data name="locExitFileExistsErr" xml:space="preserve">
    <value>Error: Exit file '{0}' already exists</value>
  </data>
  <data name="locFailedErr" xml:space="preserve">
    <value>Execution failed: {0}</value>
  </data>
  <data name="locImpersonateErr" xml:space="preserve">
    <value>Exception trying to impersonate user: {0}</value>
  </data>
  <data name="locInpEitherErr" xml:space="preserve">
    <value>Specify either -i or -Q.</value>
  </data>
  <data name="locInpFileEmptyErr" xml:space="preserve">
    <value>Input file ({0}) is empty; nothing to execute.</value>
  </data>
  <data name="locInpFileGeneralErr" xml:space="preserve">
    <value>Input file ({0}) error: {1}</value>
  </data>
  <data name="locInpFileNotExistErr" xml:space="preserve">
    <value>Input file ({0}) does not exist.</value>
  </data>
  <data name="locInpNotBothErr" xml:space="preserve">
    <value>Cannot specify both -i and -Q at the same time.</value>
  </data>
  <data name="locIntegerErr" xml:space="preserve">
    <value>{0} option ({1}) is not a valid integer.</value>
  </data>
  <data name="locInvalidCharErr" xml:space="preserve">
    <value>{0} name ('{1}') has an invalid character at position {2}.</value>
  </data>
  <data name="locLogonFailedErr" xml:space="preserve">
    <value>'LogOnUser' failed with error code: {0}</value>
  </data>
  <data name="locMaxErr" xml:space="preserve">
    <value>{0} name ('{1}' which is {2} characters) is more than the maximum length of {3}.</value>
  </data>
  <data name="locMinErr" xml:space="preserve">
    <value>{0} name ('{1}' which is {2} characters) is less than the minimum length of {3}.</value>
  </data>
  <data name="locNameDatabase" xml:space="preserve">
    <value>Database</value>
  </data>
  <data name="locNameDomain" xml:space="preserve">
    <value>Domain</value>
  </data>
  <data name="locNameInstance" xml:space="preserve">
    <value>Instance</value>
  </data>
  <data name="locNameOutputFile" xml:space="preserve">
    <value>Output file</value>
  </data>
  <data name="locNameOutputResultStatFile" xml:space="preserve">
    <value>Output Result Stat file</value>
  </data>
  <data name="locNamePassword" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="locNameServer" xml:space="preserve">
    <value>Server</value>
  </data>
  <data name="locNameTraceFile" xml:space="preserve">
    <value>Trace file</value>
  </data>
  <data name="locNameUsername" xml:space="preserve">
    <value>User name</value>
  </data>
  <data name="locNoInpErr" xml:space="preserve">
    <value>There is no query or script to execute.</value>
  </data>
  <data name="locOptionQEmptyErr" xml:space="preserve">
    <value>The query specified by the -Q option is empty.</value>
  </data>
  <data name="locOptionUFormatErr" xml:space="preserve">
    <value>The -U option must be in the format &lt;domain&gt;\&lt;user name&gt;.</value>
  </data>
  <data name="locOutputFileCloseErr" xml:space="preserve">
    <value>Output file close error: {0}</value>
  </data>
  <data name="locOutputFileErr" xml:space="preserve">
    <value>Output file error: {0}</value>
  </data>
  <data name="locOutputFileOpenErr" xml:space="preserve">
    <value>Output file open error: {0}</value>
  </data>
  <data name="locParseArgsErr" xml:space="preserve">
    <value>Parsing the command line failed: {0}</value>
  </data>
  <data name="locParseMissingArgErr" xml:space="preserve">
    <value>{0} is missing its argument.</value>
  </data>
  <data name="locRangeErr" xml:space="preserve">
    <value>{0} option ({1}) must be greater than zero, but less than {2}.</value>
  </data>
  <data name="locRepeatedOption" xml:space="preserve">
    <value>Option '{0}' cannot be specified multiple times.</value>
  </data>
  <data name="locScriptingVarInvalidFormatErr" xml:space="preserve">
    <value>'{0}' is an invalid syntax for -v option. It must be name=value.</value>
  </data>
  <data name="locScriptingVarInvalidNameErr" xml:space="preserve">
    <value>'{0}' is an invalid -v option. Scripting variable names starting with "ascmd" are reserved for command-line arguments.</value>
  </data>
  <data name="locTraceFileCloseErr" xml:space="preserve">
    <value>Trace file close error: {0}</value>
  </data>
  <data name="locTraceFileErr" xml:space="preserve">
    <value>Trace file error: {0}</value>
  </data>
  <data name="locTraceFileOpenErr" xml:space="preserve">
    <value>Trace file open error: {0}</value>
  </data>
  <data name="locTraceInvalidDelimErr" xml:space="preserve">
    <value>'{0}' is an invalid trace file delimiter. It should only be a single character.</value>
  </data>
  <data name="locTraceInvalidFormatErr" xml:space="preserve">
    <value>'{0}' is an invalid trace file format. Specify "text" or "csv".</value>
  </data>
  <data name="locTraceInvalidLevelErr" xml:space="preserve">
    <value>'{0}' is an invalid trace file level. Specify "high", "medium", "low" or "duration".</value>
  </data>
  <data name="locTraceNoHttpErr" xml:space="preserve">
    <value>-T tracing cannot be done over a http or https connection.</value>
  </data>
  <data name="locTraceStopErr" xml:space="preserve">
    <value>Trace stopped -- error occurred: </value>
  </data>
  <data name="locTraceStopSuccessMsg" xml:space="preserve">
    <value>Trace stopped -- completed successfully</value>
  </data>
  <data name="locTraceWriteErr" xml:space="preserve">
    <value>Trace write error: {0}</value>
  </data>
  <data name="locUnknownOptionErr" xml:space="preserve">
    <value>'{0}': Unknown Option. Enter '-?' or '/?' for help.</value>
  </data>
  <data name="locVersion" xml:space="preserve">
    <value>Version {0} {1}</value>
  </data>
</root>